@using {{ProjectName}}.Framework
@using {{ProjectName}}.ServiceContracts.Features.Products
@page "/products"
@inherits ListingBase<{{ProjectName}}.Razor.Features.Products.ProductListing.ProductListingViewModel, ProductListingBusinessModel,
                                {{ProjectName}}.Razor.Features.Products.ProductListing.ProductFilterViewModel, ProductFilterBusinessModel, IProductListingDataService>

{{#if (eq UIFramework "Bootstrap")}}
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">Product Catalog</h2>
            <p class="text-muted mb-0">Manage your product inventory</p>
        </div>
        <a class="btn btn-dark shadow-sm" href="/products/create">
            <i class="bi bi-plus-circle me-2"></i>Add New Product
        </a>
    </div>

    <!-- Error Display -->
    <If Condition="!string.IsNullOrEmpty(Error)">
        <div class="alert alert-danger d-flex align-items-center mb-4" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            <div>@Error</div>
        </div>
    </If>

    <!-- Loading State -->
    <If Condition="!ItemsLoaded || IsWorking">
        <div class="loading-overlay" role="status" aria-live="polite" aria-busy="true">
            <div class="text-center">
                <div class="shimmer-text mb-3">Loadingâ€¦</div>
                <div class="spinner-border" role="presentation"></div>
            </div>
        </div>
    </If>

    <!-- Content -->
    <If Condition="ItemsLoaded">
        <!-- Empty State -->
        <If Condition="!Items.Any()">
            <div class="text-center py-5">
                <div class="mb-4">
                    <i class="bi bi-box-seam display-1 text-muted"></i>
                </div>
                <h4 class="text-muted mb-3">No Products Found</h4>
                <p class="text-muted mb-4">Get started by creating your first product.</p>
                <a class="btn btn-dark" href="/products/create">
                    <i class="bi bi-plus-circle me-2"></i>Create Your First Product
                </a>
            </div>
        </If>

        <!-- Items Grid -->
        <If Condition="Items.Any()">
            <div class="row g-4">
                <ForEach Items="Items" Context="item">
                    <div class="col-12 col-md-6 col-lg-4">
                        <div class="card h-100 shadow-sm border-1 product-card">
                            <div class="card-body d-flex flex-column">
                                <div class="d-flex justify-content-between align-items-start mb-3">
                                    <h5 class="card-title mb-0 text-truncate" title="@item.Name">@item.Name</h5>
                                    <span class="badge @GetStatusBadgeClass(item.ProductStatus) ms-2">
                                        @item.ProductStatus.ToString()
                                    </span>
                                </div>

                                <div class="mb-3">
                                    <span class="h4 text-dark fw-bold">@item.Price.ToString("C")</span>
                                </div>

                                <p class="card-text text-muted flex-grow-1 mb-3">
                                    <If Condition="!string.IsNullOrEmpty(item.Description)">
                                        @(item.Description.Length > 180 ? item.Description[..180] + "..." : item.Description)
                                    </If>
                                    <If Condition="string.IsNullOrEmpty(item.Description)">
                                        <em>No description available</em>
                                    </If>
                                </p>

                                <div class="mt-auto">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <small class="text-muted">
                                            <i class="bi bi-calendar3 me-1"></i>
                                            @item.CreatedAt.ToString("MMM dd, yyyy")
                                        </small>
                                        <a class="btn btn-outline-dark btn-sm" href="/products/edit/@item.Id">
                                            <i class="bi bi-pencil me-1"></i>Edit
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </ForEach>
            </div>
        </If>
    </If>
</div>
{{/if}}

{{#if (eq UIFramework "FluentUI")}}
<div class="container-fluid">
    <!-- Page Header -->
    <div class="listing-container">
        <div class="page-header">
            <div class="header-content">
                <FluentLabel Typo="Typography.H2" Class="page-title">Product Catalog</FluentLabel>
                <FluentLabel Typo="Typography.Body" Class="page-subtitle">Manage your product inventory</FluentLabel>
            </div>
            <div class="header-actions">
                <!-- View Switcher -->
                <div class="view-switcher">
                    <FluentButton Appearance="@(isCardView? Appearance.Accent: Appearance.Neutral)"
                                  Size="ButtonSize.Small" IconStart="@(new Icons.Regular.Size16.Grid())"
                                  OnClick="@(() => ToggleView(true))"
                                  Title="Card View"> 
                    </FluentButton>
                    <FluentButton Appearance="@(!isCardView ? Appearance.Accent : Appearance.Neutral)"
                                  Size="ButtonSize.Small" IconStart="@(new Icons.Regular.Size16.Table())"
                                  OnClick="@(() => ToggleView(false))"
                                  Title="Table View"> 
                    </FluentButton>
                </div>
                <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.Add())"
                              OnClick="@(() => NavigationManager.NavigateTo("/products/create"))">
                    Add New Product
                </FluentButton>
            </div>
        </div>
    </div>

    <!-- Error Display -->
    <If Condition="!string.IsNullOrEmpty(Error)">
        <FluentMessageBar Intent="MessageIntent.Error" Class="mb-4">
            @Error
        </FluentMessageBar>
    </If>

    <!-- Loading State -->
    <If Condition="!ItemsLoaded || IsWorking">
        <div class="loading-container">
            <FluentProgressRing />
            <FluentLabel Typo="Typography.Body">Loading products...</FluentLabel>
        </div>
    </If>

    <!-- Content -->
    <If Condition="ItemsLoaded">
        <!-- Empty State -->
        <If Condition="!Items.Any()">
            <div class="empty-state">
                <div class="empty-icon">
                    <FluentIcon Value="@(new Icons.Regular.Size48.Box())" />
                </div>
                <FluentLabel Typo="Typography.H4" Class="empty-title">No Products Found</FluentLabel>
                <FluentLabel Typo="Typography.Body" Class="empty-description">Get started by creating your first product.</FluentLabel>
                <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.Add())"
                              OnClick="@(() => NavigationManager.NavigateTo("/products/create"))"> 
                    Create Your First Product
                </FluentButton>
            </div>
        </If>

        <!-- Items Content -->
        <If Condition="Items.Any()">
            <div class="listing-content">
                <!-- Card View -->
                <If Condition="isCardView">
                    <div class="card-grid">
                        <ForEach Items="Items" Context="item">
                            <FluentCard Class="item-card">
                                <div class="card-header-content">
                                    <FluentLabel Typo="Typography.H6" Class="card-title">@item.Name</FluentLabel>
                                    <FluentBadge Appearance="@GetFluentStatusAppearance(item.ProductStatus)" Class="status-badge">
                                        @item.ProductStatus.ToString()
                                    </FluentBadge>
                                </div>

                                <div class="card-content">
                                    <div class="card-price">
                                        <FluentLabel Typo="Typography.H5" Class="price-text">@item.Price.ToString("C")</FluentLabel>
                                    </div>
                                    <FluentLabel Typo="Typography.Body" Class="card-description">
                                        @(item.Description != null && item.Description.Length > 120 ? item.Description[..120] + "..." : item.Description)
                                    </FluentLabel>
                                    <div class="card-metadata">
                                        <FluentLabel Typo="Typography.Subject" Class="metadata-item">
                                            <FluentIcon Value="@(new Icons.Regular.Size16.Calendar())" />
                                            Created: @item.CreatedAt.ToString("MMM dd, yyyy")
                                        </FluentLabel>
                                    </div>
                                </div>

                                <div class="card-actions">
                                    <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.Edit())"
                                                  OnClick="@(() => NavigationManager.NavigateTo($"/products/edit/{item.Id}"))"> 
                                        Edit
                                    </FluentButton>
                                    <FluentButton Appearance="Appearance.Neutral" IconStart="@(new Icons.Regular.Size16.Delete())"
                                                  OnClick="@(() => DeleteProduct(item.Id))">
                                        Delete
                                    </FluentButton>
                                </div>
                            </FluentCard>
                        </ForEach> 
                    </div>
                </If>

                <!-- Table View -->
                <If Condition="!isCardView">
                    <FluentDataGrid Items="@Items.AsQueryable()" TGridItem="@{{ProjectName}}.Razor.Features.Products.ProductListing.ProductListingViewModel" Class="data-table">
                        <PropertyColumn Property="@(item => item.Name)" Title="Name" Sortable="true" />
                        <PropertyColumn Property="@(item => item.Price.ToString("C"))" Title="Price" Sortable="true" />
                        <PropertyColumn Property="@(item => item.Description)" Title="Description" />
                        <PropertyColumn Property="@(item => item.CreatedAt.ToString("MMM dd, yyyy"))" Title="Created" />
                        <TemplateColumn Title="Status">
                            <FluentBadge Appearance="@GetFluentStatusAppearance(context.ProductStatus)">
                                @context.ProductStatus.ToString()
                            </FluentBadge>
                        </TemplateColumn>
                        <TemplateColumn Title="Actions" Class="actions-column">
                            <FluentButton Appearance="Appearance.Outline"
                                          Size="ButtonSize.Small"
                                          OnClick="@(() => NavigationManager.NavigateTo($"/products/edit/{context.Id}"))">
                                <FluentIcon Value="@(new Icons.Regular.Size16.Edit())" />
                            </FluentButton>
                            <FluentButton Appearance="Appearance.Outline"
                                          Size="ButtonSize.Small"
                                          OnClick="@(() => DeleteProduct(context.Id))">
                                <FluentIcon Value="@(new Icons.Regular.Size16.Delete())" />
                            </FluentButton>
                        </TemplateColumn>
                    </FluentDataGrid>
                </If>
            </div>
        </If>
    </If>
</div>
{{/if}}

{{#if (eq UIFramework "MudBlazor")}}
<div class="container-fluid">
    <!-- Page Header -->
    <div class="page-header">
        <div class="header-content">
            <MudText Typo="Typo.h4">Product Catalog</MudText>
            <MudText Typo="Typo.body2" Class="mud-text-secondary">Manage your product inventory</MudText>
        </div>
        <MudButton Variant="Variant.Filled"
                 Color="Color.Primary"
                 Href="/products/create">
            <MudIcon Icon="Icons.Material.Filled.Add" />
            Add New Product
        </MudButton>
    </div>

    <!-- Error Display -->
    <If Condition="!string.IsNullOrEmpty(Error)">
        <MudAlert Severity="Severity.Error" Class="mb-4">
            @Error
        </MudAlert>
    </If>

    <!-- Loading State -->
    <If Condition="!ItemsLoaded || IsWorking">
        <div class="loading-container">
            <MudProgressCircular Indeterminate="true" />
            <MudText Typo="Typo.body1">Loading products...</MudText>
        </div>
    </If>

    <!-- Content -->
    <If Condition="ItemsLoaded">
        <!-- Empty State -->
        <If Condition="!Items.Any()">
            <div class="empty-state">
                <div class="empty-icon">
                    <MudIcon Icon="Icons.Material.Filled.Inventory" Size="Size.Large" />
                </div>
                <MudText Typo="Typo.h4" Class="empty-title">No Products Found</MudText>
                <MudText Typo="Typo.body1" Class="empty-description">Get started by creating your first product.</MudText>
                <MudButton Variant="Variant.Filled"
                         Color="Color.Primary"
                         Href="/products/create">
                    <MudIcon Icon="Icons.Material.Filled.Add" />
                    Create Your First Product
                </MudButton>
            </div>
        </If>

        <!-- Items Grid -->
        <If Condition="Items.Any()">
            <div class="product-grid">
                <ForEach Items="Items" Context="item">
                    <MudCard Class="product-card">
                        <MudCardContent>
                            <div class="card-header">
                                <MudText Typo="Typo.h6" Class="card-title">@item.Name</MudText>
                                <MudChip Color="@GetMudStatusColor(item.ProductStatus)" Size="Size.Small">
                                    @item.ProductStatus.ToString()
                                </MudChip>
                            </div>

                            <div class="card-price">
                                <MudText Typo="Typo.h5" Class="price-text">@item.Price.ToString("C")</MudText>
                            </div>

                            <div class="card-description">
                                <If Condition="!string.IsNullOrEmpty(item.Description)">
                                    <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                        @(item.Description.Length > 180 ? item.Description[..180] + "..." : item.Description)
                                    </MudText>
                                </If>
                                <If Condition="string.IsNullOrEmpty(item.Description)">
                                    <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                        <em>No description available</em>
                                    </MudText>
                                </If>
                            </div>
                        </MudCardContent>
                        <MudCardActions>
                            <div class="card-actions">
                                <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                    <MudIcon Icon="Icons.Material.Filled.CalendarToday" Size="Size.Small" />
                                    @item.CreatedAt.ToString("MMM dd, yyyy")
                                </MudText>
                                <MudButton Variant="Variant.Outlined"
                                         Size="Size.Small"
                                         Href="@($"/products/edit/{item.Id}")">
                                    <MudIcon Icon="Icons.Material.Filled.Edit" />
                                    Edit
                                </MudButton>
                            </div>
                        </MudCardActions>
                    </MudCard>
                </ForEach>
            </div>
        </If>
    </If>
</div>
{{/if}}

{{#if (eq UIFramework "Radzen")}}
<div class="container-fluid">
    <!-- Page Header -->
    <div class="page-header">
        <div class="header-content">
            <RadzenText TextStyle="TextStyle.H4">Product Catalog</RadzenText>
            <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">Manage your product inventory</RadzenText>
        </div>
        <RadzenButton ButtonStyle="ButtonStyle.Primary"
                    Click="@(() => NavigationManager.NavigateTo("/products/create"))">
            <i class="rzi rzi-plus"></i>
            Add New Product
        </RadzenButton>
    </div>

    <!-- Error Display -->
    <If Condition="!string.IsNullOrEmpty(Error)">
        <RadzenAlert AlertStyle="AlertStyle.Danger" Class="mb-4">
            @Error
        </RadzenAlert>
    </If>

    <!-- Loading State -->
    <If Condition="!ItemsLoaded || IsWorking">
        <div class="loading-container">
            <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Light" Mode="ProgressBarMode.Indeterminate" />
            <RadzenText TextStyle="TextStyle.Body1">Loading products...</RadzenText>
        </div>
    </If>

    <!-- Content -->
    <If Condition="ItemsLoaded">
        <!-- Empty State -->
        <If Condition="!Items.Any()">
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="rzi rzi-box" style="font-size: 4rem; color: #999;"></i>
                </div>
                <RadzenText TextStyle="TextStyle.H4" Class="empty-title">No Products Found</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" Class="empty-description">Get started by creating your first product.</RadzenText>
                <RadzenButton ButtonStyle="ButtonStyle.Primary"
                            Click="@(() => NavigationManager.NavigateTo("/products/create"))">
                    <i class="rzi rzi-plus"></i>
                    Create Your First Product
                </RadzenButton>
            </div>
        </If>

        <!-- Items Grid -->
        <If Condition="Items.Any()">
            <div class="product-grid">
                <ForEach Items="Items" Context="item">
                    <RadzenCard Class="product-card">
                        <div class="card-header">
                            <RadzenText TextStyle="TextStyle.H6" Class="card-title">@item.Name</RadzenText>
                            <RadzenBadge BadgeStyle="@GetRadzenStatusStyle(item.ProductStatus)" Text="@item.ProductStatus.ToString()" />
                        </div>

                        <div class="card-price">
                            <RadzenText TextStyle="TextStyle.H5" Class="price-text">@item.Price.ToString("C")</RadzenText>
                        </div>

                        <div class="card-description">
                            <If Condition="!string.IsNullOrEmpty(item.Description)">
                                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">
                                    @(item.Description.Length > 180 ? item.Description[..180] + "..." : item.Description)
                                </RadzenText>
                            </If>
                            <If Condition="string.IsNullOrEmpty(item.Description)">
                                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">
                                    <em>No description available</em>
                                </RadzenText>
                            </If>
                        </div>

                        <div class="card-actions">
                            <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                                <i class="rzi rzi-calendar"></i>
                                @item.CreatedAt.ToString("MMM dd, yyyy")
                            </RadzenText>
                            <RadzenButton ButtonStyle="ButtonStyle.Light"
                                        Size="ButtonSize.Small"
                                        Click="@(() => NavigationManager.NavigateTo($"/products/edit/{item.Id}"))">
                                <i class="rzi rzi-pencil"></i>
                                Edit
                            </RadzenButton>
                        </div>
                    </RadzenCard>
                </ForEach>
            </div>
        </If>
    </If>
</div>
{{/if}}

{{#if (eq UIFramework "TailwindCSS")}}
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
    <!-- Page Header -->
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
        <div>
            <h2 class="text-2xl font-bold text-black">Product Catalog</h2>
            <p class="text-gray-600 mt-1">Manage your product inventory</p>
        </div>
        <div class="flex items-center gap-3">
            <!-- View Toggle -->
            <div class="flex items-center bg-gray-100 rounded-lg p-1">
                <button @onclick="() => ToggleView(false)" class="@(_isTableView ? "text-gray-600 hover:text-black" : "bg-black text-white shadow-sm") px-3 py-1.5 text-sm font-medium rounded-md transition-all">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"/>
                    </svg>
                </button>
                <button @onclick="() => ToggleView(false)" class="@(_isTableView ? "bg-black text-white shadow-sm" : "text-gray-600 hover:text-black") px-3 py-1.5 text-sm font-medium rounded-md transition-all">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"/>
                    </svg>
                </button>
            </div>
            <a class="inline-flex items-center px-4 py-2 bg-black text-white text-sm font-medium rounded-lg hover:bg-gray-800 transition-colors" href="products/create">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                </svg>
                Add New Product
            </a>
        </div>
    </div>

    <!-- Error Display -->
    <If Condition="!string.IsNullOrEmpty(Error)">
        <div class="flex items-center p-4 bg-red-50 border border-red-200 rounded-lg mb-6" role="alert">
            <svg class="w-5 h-5 text-red-500 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.732 15.5c-.77.833.192 2.5 1.732 2.5z"/>
            </svg>
            <span class="text-red-800">@Error</span>
        </div>
    </If>

    <!-- Loading State -->
    <If Condition="!ItemsLoaded || IsWorking">
        <div class="flex items-center justify-center py-12" role="status" aria-live="polite" aria-busy="true">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <span class="ml-3 text-gray-600">Loading products...</span>
        </div>
    </If>

    <!-- Main Content -->
    <If Condition="ItemsLoaded && !IsWorking">
        <!-- Search and Filters -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                    <label class="form-label">Search Products</label>
                    <input @bind="FilterViewModel.SearchKey"
                           class="form-control"
                           placeholder="Search by name or description..." />
                </div>
                <div>
                    <label class="form-label">Status</label>
                    <select @bind="FilterViewModel.ProductStatus"
                            class="form-control">
                        <option value="">All Statuses</option>
                        <option value="Active">Active</option>
                        <option value="Inactive">Inactive</option>
                        <option value="Discontinued">Discontinued</option>
                    </select>
                </div>
                <div class="flex items-end">
                    <button @onclick="LoadItemsAsync"
                            class="w-full px-4 py-2 bg-black text-white font-medium rounded-lg hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors">
                        Search
                    </button>
                </div>
            </div>
        </div>


        <!-- Products Display -->
        <If Condition="Items?.Any() == true">
            <!-- Card View -->
            <If Condition="!_isTableView">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
                    <ForEach Items="Items" Context="item">
                        <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow">
                            <div class="p-6">
                                <div class="flex items-start justify-between mb-3">
                                    <h3 class="text-lg font-semibold text-black truncate">@item.Name</h3>
                                    <span class="@GetTailwindStatusClass(item.ProductStatus) px-2 py-1 text-xs font-medium rounded-full">
                                        @item.ProductStatus
                                    </span>
                                </div>

                                <If Condition="!string.IsNullOrEmpty(item.Description)">
                                    <p class="text-gray-600 text-sm mb-4 line-clamp-2">@item.Description</p>
                                </If>

                                <div class="flex items-center justify-between mb-4">
                                    <span class="text-lg font-bold text-black">@item.Price.ToString("C")</span>
                                </div>

                                <div class="flex space-x-2">
                                    <a href="@($"products/edit/{item.Id}")"
                                       class="flex-1 px-3 py-2 text-sm font-medium text-black bg-gray-100 rounded-lg hover:bg-gray-200 text-center transition-colors">
                                        Edit
                                    </a>
                                    <button @onclick="() => DeleteProduct(item.Id)"
                                            class="flex-1 px-3 py-2 text-sm font-medium text-red-600 bg-red-50 rounded-lg hover:bg-red-100 transition-colors">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </ForEach>
                </div>
            </If>

            <!-- Table View -->
            <If Condition="_isTableView">
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                    <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                <ForEach Items="Items" Context="item">
                                    <tr class="hover:bg-gray-50">
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm font-medium text-black">@item.Name</div>
                                        </td>
                                        <td class="px-6 py-4">
                                            <div class="text-sm text-gray-600 max-w-xs truncate">@(item.Description ?? "-")</div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm font-medium text-black">@item.Price.ToString("C")</div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="@GetTailwindStatusClass(item.ProductStatus) px-2 py-1 text-xs font-medium rounded-full">
                                                @item.ProductStatus
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                            <div class="flex justify-end space-x-2">
                                                <a href="@($"products/edit/{item.Id}")"
                                                   class="text-black hover:text-gray-600 font-medium">
                                                    Edit
                                                </a>
                                                <button @onclick="() => DeleteProduct(item.Id)"
                                                        class="text-red-600 hover:text-red-800 font-medium">
                                                    Delete
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                </ForEach>
                            </tbody>
                        </table>
                    </div>
                </div>
            </If>
        </If>

        <!-- Empty State -->
        <If Condition="Items?.Any() != true">
            <div class="text-center py-12 bg-white rounded-lg border border-gray-200">
                <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"/>
                </svg>
                <h3 class="text-lg font-medium text-black mb-2">No products found</h3>
                <p class="text-gray-600 mb-4">Get started by creating your first product.</p>
                <a href="products/create"
                   class="inline-flex items-center px-4 py-2 bg-black text-white font-medium rounded-lg hover:bg-gray-800 transition-colors">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                    </svg>
                    Add New Product
                </a>
            </div>
        </If>

    </If>
</div>
{{/if}}

@code {
    {{#if (eq UIFramework "TailwindCSS")}}
    private bool _isTableView = false;

     private bool isCardView = true;

    private void ToggleView(bool cardView)
    {
        isCardView = cardView;
        StateHasChanged();
    }

    private Task DeleteProduct(string id)
    {
        // Implement delete logic here
        return Task.CompletedTask;
    }

    

    private string GetTailwindStatusClass({{ProjectName}}.Common.Enums.ProductStatus status)
    {
        return status switch
        {
            {{ProjectName}}.Common.Enums.ProductStatus.Active => "bg-green-100 text-green-800",
            {{ProjectName}}.Common.Enums.ProductStatus.Inactive => "bg-yellow-100 text-yellow-800",
            {{ProjectName}}.Common.Enums.ProductStatus.Discontinued => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
    {{/if}}


    {{#if (eq UIFramework "Bootstrap")}}
    private string GetStatusBadgeClass({{ProjectName}}.Common.Enums.ProductStatus status)
    {
        return status switch
        {
            {{ProjectName}}.Common.Enums.ProductStatus.Active => "bg-success",
            {{ProjectName}}.Common.Enums.ProductStatus.Inactive => "bg-secondary",
            {{ProjectName}}.Common.Enums.ProductStatus.Discontinued => "bg-danger",
            _ => "bg-secondary"
        };
    }
    {{/if}}

    {{#if (eq UIFramework "FluentUI")}}
   

    private Appearance GetFluentStatusAppearance({{ProjectName}}.Common.Enums.ProductStatus status)
    {
        return status switch
        {
            {{ProjectName}}.Common.Enums.ProductStatus.Active => Appearance.Accent,
            {{ProjectName}}.Common.Enums.ProductStatus.Inactive => Appearance.Neutral,
            {{ProjectName}}.Common.Enums.ProductStatus.Discontinued => Appearance.Lightweight,
            _ => Appearance.Neutral
        };
    }
    {{/if}}

    {{#if (eq UIFramework "MudBlazor")}}
    private Color GetMudStatusColor({{ProjectName}}.Common.Enums.ProductStatus status)
    {
        return status switch
        {
            {{ProjectName}}.Common.Enums.ProductStatus.Active => Color.Success,
            {{ProjectName}}.Common.Enums.ProductStatus.Inactive => Color.Default,
            {{ProjectName}}.Common.Enums.ProductStatus.Discontinued => Color.Error,
            _ => Color.Default
        };
    }
    {{/if}}

    {{#if (eq UIFramework "Radzen")}}
    private BadgeStyle GetRadzenStatusStyle({{ProjectName}}.Common.Enums.ProductStatus status)
    {
        return status switch
        {
            {{ProjectName}}.Common.Enums.ProductStatus.Active => BadgeStyle.Success,
            {{ProjectName}}.Common.Enums.ProductStatus.Inactive => BadgeStyle.Secondary,
            {{ProjectName}}.Common.Enums.ProductStatus.Discontinued => BadgeStyle.Danger,
            _ => BadgeStyle.Secondary
        };
    }
    {{/if}} 
}