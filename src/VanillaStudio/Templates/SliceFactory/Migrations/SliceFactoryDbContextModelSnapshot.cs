// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using {{RootNamespace}}.SliceFactory.Data;

#nullable disable

namespace {{RootNamespace}}.SliceFactory.Migrations
{
    [DbContext(typeof(SliceFactoryDbContext))]
    partial class SliceFactoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("{{RootNamespace}}.SliceFactory.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BasePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ComponentPrefix")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DirectoryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasForm")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasListing")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModuleNamespace")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryKeyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileConfiguration")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectNamespace")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("UIFramework")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ComponentPrefix");

                    b.HasIndex("ModuleNamespace");

                    b.HasIndex("ModuleNamespace", "ComponentPrefix")
                        .IsUnique();

                    b.ToTable("Features");
                });

            modelBuilder.Entity("{{RootNamespace}}.SliceFactory.Models.FeatureFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Exists")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FeatureId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SliceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("ProjectType");

                    b.HasIndex("SliceType");

                    b.ToTable("FeatureFiles");
                });

            modelBuilder.Entity("{{RootNamespace}}.SliceFactory.Models.FeatureProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("FeatureId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectNamespace")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("ProjectType");

                    b.HasIndex("FeatureId", "ProjectType")
                        .IsUnique();

                    b.ToTable("FeatureProjects");
                });

            modelBuilder.Entity("{{RootNamespace}}.SliceFactory.Models.FeatureFile", b =>
                {
                    b.HasOne("{{RootNamespace}}.SliceFactory.Models.Feature", "Feature")
                        .WithMany("Files")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("{{RootNamespace}}.SliceFactory.Models.FeatureProject", b =>
                {
                    b.HasOne("{{RootNamespace}}.SliceFactory.Models.Feature", "Feature")
                        .WithMany("Projects")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("{{RootNamespace}}.SliceFactory.Models.Feature", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
