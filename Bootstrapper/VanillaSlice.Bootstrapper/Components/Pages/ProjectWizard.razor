@page "/wizard"
@using VanillaSlice.Bootstrapper.Models
@using VanillaSlice.Bootstrapper.Extensions
@using VanillaSlice.Bootstrapper.Services
@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions
@inject IJSRuntime JSRuntime
@inject ProjectGenerationService ProjectGenerator
@inject EnhancedProjectGenerationService EnhancedProjectGenerator
@inject ILogger<ProjectWizard> _logger

<PageTitle>Project Bootstrapper - Configuration Wizard</PageTitle>

<!-- Enhanced Header with Progress -->
<div class="bg-dark text-white py-4 mb-4">
    <div class="container-fluid">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="mb-2">
                    <i class="bi bi-magic"></i> Blazor Project Bootstrapper
                </h1>
                <p class="mb-0 opacity-75">Create a complete, production-ready Blazor solution with advanced architecture</p>
            </div>
            <div class="col-md-4 text-end">
                <div class="badge bg-light text-dark fs-6 px-3 py-2">
                    Step @currentStep of @totalSteps
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Progress Bar -->
<div class="container-fluid mb-4">
    <div class="progress" style="height: 8px;">
        <div class="progress-bar bg-success" role="progressbar"
             style="width: @(((double)currentStep / totalSteps) * 100)%"
             aria-valuenow="@currentStep" aria-valuemin="0" aria-valuemax="@totalSteps">
        </div>
    </div>

    <!-- Step Indicators -->
    <div class="d-flex justify-content-between mt-2">
        @for (int i = 1; i <= totalSteps; i++)
        {
            var stepNumber = i;
            <div class="text-center">
                <div class="step-indicator @GetStepIndicatorClass(stepNumber)"
                     style="width: 40px; height: 40px; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto;">
                    @if (stepNumber < currentStep)
                    {
                        <i class="bi bi-check-lg text-white"></i>
                    }
                    else
                    {
                        <span class="fw-bold">@stepNumber</span>
                    }
                </div>
                <small class="text-muted mt-1 d-block">@GetStepTitle(stepNumber)</small>
            </div>
        }
    </div>
</div>

<div class="container-fluid">

    <div class="row">
        <div class="col-md-3">
            <!-- Enhanced Wizard Steps Navigation -->
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="mb-0">
                        <i class="bi bi-list-check me-2"></i>Configuration Steps
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush">
                        @for (int i = 1; i <= totalSteps; i++)
                        {
                            var stepNumber = i;
                            var isCompleted = stepNumber < currentStep;
                            var isCurrent = stepNumber == currentStep;
                            var isAccessible = stepNumber <= currentStep || !requireValidation;

                            <button type="button"
                                    class="list-group-item list-group-item-action d-flex align-items-center @GetStepNavClass(stepNumber)"
                                    @onclick="() => NavigateToStep(stepNumber)"
                                    disabled="@(!isAccessible)">
                                <div class="step-nav-indicator me-3 @GetStepNavIndicatorClass(stepNumber)">
                                    @if (isCompleted)
                                    {
                                        <i class="bi bi-check-lg"></i>
                                    }
                                    else
                                    {
                                        <span class="fw-bold">@stepNumber</span>
                                    }
                                </div>
                                <div class="flex-grow-1">
                                    <div class="fw-semibold">@GetStepTitle(stepNumber)</div>
                                    <small class='@(isCurrent ? "text-light" : "text-muted")'>@GetStepDescription(stepNumber)</small>
                                </div>
                                @if (isCurrent)
                                {
                                    <i class="bi bi-chevron-right text-dark"></i>
                                }
                            </button>
                        }
                    </div>
                </div>
            </div>

            <!-- Enhanced Configuration Preview -->
            <div class="card mt-3 shadow-sm">
                <div class="card-header bg-light">
                    <h6 class="mb-0">
                        <i class="bi bi-eye me-2"></i>Configuration Preview
                    </h6>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="d-flex align-items-center mb-2">
                            <i class="bi bi-folder-fill text-dark me-2"></i>
                            <strong>@(string.IsNullOrEmpty(config.ProjectName) ? "Project Name" : config.ProjectName)</strong>
                        </div>
                        <small class="text-muted ms-4">@(string.IsNullOrEmpty(config.RootNamespace) ? "Root.Namespace" : config.RootNamespace)</small>
                    </div>

                    <hr class="my-2">

                    <div class="small">
                        <div class="mb-2">
                            <i class="bi bi-diagram-3 text-info me-2"></i>
                            <strong>Platform:</strong> @config.PlatformType.GetDisplayName()
                        </div>
                        <div class="mb-2">
                            <i class="bi bi-puzzle text-warning me-2"></i>
                            <strong>Components:</strong> @config.ComponentStrategy.GetDisplayName()
                        </div>
                        <div class="mb-2">
                            <i class="bi bi-display text-success me-2"></i>
                            <strong>Rendering:</strong> @config.RenderingMode.GetDisplayName()
                        </div>
                        <div class="mb-2">
                            <i class="bi bi-database text-danger me-2"></i>
                            <strong>Database:</strong> @config.DatabaseProvider.GetDisplayName()
                        </div>
                    </div>

                    @if (GetSelectedFeaturesCount() > 0)
                    {
                        <hr class="my-2">
                        <div class="small">
                            <div class="text-muted mb-1">
                                <i class="bi bi-star-fill me-1"></i>
                                @GetSelectedFeaturesCount() features selected
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-9">
            <EditForm Model="config" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />

                @if (currentStep == 1)
                {
                    <div class="card shadow-sm">
                        <div class="card-header bg-dark text-white">
                            <div class="d-flex align-items-center">
                                <div class="step-header-icon me-3">
                                    <i class="bi bi-info-circle-fill"></i>
                                </div>
                                <div>
                                    <h4 class="mb-0">Project Information</h4>
                                    <small class="opacity-75">Define your project's basic details and structure</small>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <!-- Project Identity Section -->
                            <div class="section-group mb-4">
                                <h5 class="section-title">
                                    <i class="bi bi-tag-fill text-dark me-2"></i>Project Identity
                                </h5>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="projectName" class="form-label d-flex align-items-center">
                                                Project Name <span class="text-danger">*</span>
                                                <button type="button" class="btn btn-link btn-sm p-0 ms-2"
                                                        data-bs-toggle="tooltip" data-bs-placement="top"
                                                        title="This will be used as the solution name and main project prefix. Use PascalCase format (e.g., MyCompany.VotingApp)">
                                                    <i class="bi bi-question-circle text-muted"></i>
                                                </button>
                                            </label>
                                            <InputText id="projectName" class="@($"form-control {GetValidationClass(() => config.ProjectName)}")"
                                                       @bind-Value="config.ProjectName"
                                                       placeholder="e.g., MyCompany.VotingApp"
                                                       @onblur="() => SyncNamespaceFromProject()" />
                                            <ValidationMessage For="@(() => config.ProjectName)" class="text-danger small" />
                                            <div class="form-text">
                                                <i class="bi bi-lightbulb text-warning me-1"></i>
                                                This creates the solution file and main project structure
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="rootNamespace" class="form-label d-flex align-items-center">
                                                Root Namespace <span class="text-danger">*</span>
                                                <button type="button" class="btn btn-link btn-sm p-0 ms-2"
                                                        data-bs-toggle="tooltip" data-bs-placement="top"
                                                        title="Base namespace for all generated classes and projects. Usually matches your project name.">
                                                    <i class="bi bi-question-circle text-muted"></i>
                                                </button>
                                            </label>
                                            <InputText id="rootNamespace" class="@($"form-control {GetValidationClass(() => config.RootNamespace)}")"
                                                       @bind-Value="config.RootNamespace"
                                                       placeholder="e.g., MyCompany.VotingApp" />
                                            <ValidationMessage For="@(() => config.RootNamespace)" class="text-danger small" />
                                            <div class="form-text">
                                                <i class="bi bi-code-square text-info me-1"></i>
                                                Used as the base namespace for all generated code
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                             

                            <!-- Optional Details Section -->
                            <div class="section-group">
                                <h5 class="section-title">
                                    <i class="bi bi-card-text text-info me-2"></i>Optional Details
                                </h5>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="description" class="form-label">Project Description</label>
                                            <InputTextArea id="description" class="form-control" @bind-Value="config.Description"
                                                           rows="3" placeholder="Brief description of your project's purpose and goals..." />
                                            <div class="form-text">
                                                <i class="bi bi-info-circle text-muted me-1"></i>
                                                Optional: Helps document your project's purpose
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="authorName" class="form-label">Author Name</label>
                                            <InputText id="authorName" class="form-control" @bind-Value="config.AuthorName"
                                                       placeholder="Your name or organization" />
                                            <div class="form-text">
                                                <i class="bi bi-person-circle text-muted me-1"></i>
                                                Optional: Added to generated project files
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @if (currentStep == 2)
                {
                    <div class="card">
                        <div class="card-header">
                            <h4><i class="bi bi-diagram-3-fill"></i> Platform & Architecture</h4>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="mb-4">
                                        <label class="form-label">Platform Selection</label>
                                        <InputRadioGroup @bind-Value="config.PlatformType">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="card border-dark @(config.PlatformType == PlatformType.WebOnly ? "bg-dark bg-opacity-10" : "")">
                                                        <div class="card-body">
                                                            <div class="form-check">
                                                                <InputRadio id="webOnly" class="form-check-input" Value="@PlatformType.WebOnly" />
                                                                <label class="form-check-label" for="webOnly">
                                                                    <strong>Web Application Only</strong>
                                                                </label>
                                                            </div>
                                                            <p class="small text-muted mt-2">
                                                                Creates a Blazor web application with server and client projects.
                                                                Perfect for web-focused applications.
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="card border-success @(config.PlatformType == PlatformType.WebAndMaui ? "bg-success bg-opacity-10" : "")">
                                                        <div class="card-body">
                                                            <div class="form-check">
                                                                <InputRadio id="webAndMaui" class="form-check-input" Value="@PlatformType.WebAndMaui" />
                                                                <label class="form-check-label" for="webAndMaui">
                                                                    <strong>Web + MAUI Mobile App</strong>
                                                                </label>
                                                            </div>
                                                            <p class="small text-muted mt-2">
                                                                Includes both web application and MAUI mobile app projects
                                                                with shared components and services.
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </InputRadioGroup>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-12">
                                    <div class="mb-4">
                                        <label class="form-label">Razor Component Strategy</label>
                                        <InputRadioGroup @bind-Value="config.ComponentStrategy">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="card border-info @(config.ComponentStrategy == ComponentStrategy.CommonLibrary ? "bg-info bg-opacity-10" : "")">
                                                        <div class="card-body">
                                                            <div class="form-check">
                                                                <InputRadio id="commonLibrary" class="form-check-input" Value="@ComponentStrategy.CommonLibrary" />
                                                                <label class="form-check-label" for="commonLibrary">
                                                                    <strong>Common Razor Library</strong>
                                                                </label>
                                                            </div>
                                                            <p class="small text-muted mt-2">
                                                                Creates a separate Razor class library for reusable components
                                                                across web and mobile projects.
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="card border-warning @(config.ComponentStrategy == ComponentStrategy.Embedded ? "bg-warning bg-opacity-10" : "")">
                                                        <div class="card-body">
                                                            <div class="form-check">
                                                                <InputRadio id="embedded" class="form-check-input" Value="@ComponentStrategy.Embedded" />
                                                                <label class="form-check-label" for="embedded">
                                                                    <strong>Embedded Components</strong>
                                                                </label>
                                                            </div>
                                                            <p class="small text-muted mt-2">
                                                                Components are embedded directly in the WebPortal project.
                                                                Simpler structure for web-only applications.
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </InputRadioGroup>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-12">
                                    <div class="mb-3">
                                        <label class="form-label">Rendering Mode</label>
                                        <InputRadioGroup @bind-Value="config.RenderingMode">
                                            <div class="row">
                                                <div class="col-md-4">
                                                    <div class="card border-success @(config.RenderingMode == RenderingMode.Auto ? "bg-success bg-opacity-10" : "")">
                                                        <div class="card-body text-center">
                                                            <div class="form-check">
                                                                <InputRadio id="autoRender" class="form-check-input" Value="@RenderingMode.Auto" />
                                                                <label class="form-check-label" for="autoRender">
                                                                    <strong>Auto Render</strong>
                                                                </label>
                                                            </div>
                                                            <p class="small text-muted mt-2">
                                                                Server + WebAssembly hybrid with separate client project
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    <div class="card border-dark @(config.RenderingMode == RenderingMode.ServerOnly ? "bg-dark bg-opacity-10" : "")">
                                                        <div class="card-body text-center">
                                                            <div class="form-check">
                                                                <InputRadio id="serverOnly" class="form-check-input" Value="@RenderingMode.ServerOnly" />
                                                                <label class="form-check-label" for="serverOnly">
                                                                    <strong>Server-Only</strong>
                                                                </label>
                                                            </div>
                                                            <p class="small text-muted mt-2">
                                                                Server-side interactive rendering only
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    <div class="card border-secondary @(config.RenderingMode == RenderingMode.StaticSSR ? "bg-secondary bg-opacity-10" : "")">
                                                        <div class="card-body text-center">
                                                            <div class="form-check">
                                                                <InputRadio id="staticSSR" class="form-check-input" Value="@RenderingMode.StaticSSR" />
                                                                <label class="form-check-label" for="staticSSR">
                                                                    <strong>Static SSR</strong>
                                                                </label>
                                                            </div>
                                                            <p class="small text-muted mt-2">
                                                                Static Server-Side Rendering only
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </InputRadioGroup>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-12">
                                    <div class="mb-4">
                                        <label class="form-label">UI Framework</label>
                                        <p class="text-muted small mb-3">Choose the UI component library for your application</p>
                                        <InputRadioGroup @bind-Value="config.UIFramework">
                                            <div class="row">
                                                <div class="col-md-6 mb-3">
                                                    <div class="card border-primary @(config.UIFramework == UIFramework.Bootstrap ? "bg-primary bg-opacity-10" : "")">
                                                        <div class="card-body">
                                                            <div class="form-check">
                                                                <InputRadio id="bootstrap" class="form-check-input" Value="@UIFramework.Bootstrap" />
                                                                <label class="form-check-label" for="bootstrap">
                                                                    <strong>Bootstrap 5 (Default)</strong>
                                                                </label>
                                                            </div>
                                                            <p class="small text-muted mt-2">
                                                                Popular CSS framework with responsive design and extensive component library.
                                                                Lightweight and widely supported.
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-6 mb-3">
                                                    <div class="card border-info @(config.UIFramework == UIFramework.FluentUI ? "bg-info bg-opacity-10" : "")">
                                                        <div class="card-body">
                                                            <div class="form-check">
                                                                <InputRadio id="fluentui" class="form-check-input" Value="@UIFramework.FluentUI" />
                                                                <label class="form-check-label" for="fluentui">
                                                                    <strong>Microsoft Fluent UI</strong>
                                                                </label>
                                                            </div>
                                                            <p class="small text-muted mt-2">
                                                                Microsoft's design system with modern, accessible components.
                                                                Perfect for enterprise applications.
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-6 mb-3">
                                                    <div class="card border-secondary @(config.UIFramework == UIFramework.MudBlazor ? "bg-secondary bg-opacity-10" : "")" style="opacity: 0.6;">
                                                        <div class="card-body">
                                                            <div class="form-check">
                                                                <InputRadio id="mudblazor" class="form-check-input" Value="@UIFramework.MudBlazor" disabled />
                                                                <label class="form-check-label" for="mudblazor">
                                                                    <strong>MudBlazor (Coming Soon)</strong>
                                                                </label>
                                                            </div>
                                                            <p class="small text-muted mt-2">
                                                                Material Design components for Blazor applications.
                                                                Rich component set with theming support.
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-6 mb-3">
                                                    <div class="card border-secondary @(config.UIFramework == UIFramework.Radzen ? "bg-secondary bg-opacity-10" : "")" style="opacity: 0.6;">
                                                        <div class="card-body">
                                                            <div class="form-check">
                                                                <InputRadio id="radzen" class="form-check-input" Value="@UIFramework.Radzen" disabled />
                                                                <label class="form-check-label" for="radzen">
                                                                    <strong>Radzen (Coming Soon)</strong>
                                                                </label>
                                                            </div>
                                                            <p class="small text-muted mt-2">
                                                                Professional Blazor components with advanced data visualization
                                                                and form controls.
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </InputRadioGroup>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @if (currentStep == 3)
                {
                    <div class="card">
                        <div class="card-header">
                            <h4><i class="bi bi-toggles2"></i> Features & Database</h4>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <h5>Core Features</h5>
                                    <div class="form-check mb-3">
                                        <InputCheckbox id="includeAuth" class="form-check-input" @bind-Value="config.IncludeAuthentication" />
                                        <label class="form-check-label" for="includeAuth">
                                            <strong>Include Authentication</strong>
                                        </label>
                                        <div class="form-text">Adds ASP.NET Core Identity with login/register pages</div>
                                    </div>

                                    <div class="form-check mb-3">
                                        <InputCheckbox id="includeDb" class="form-check-input" @bind-Value="config.IncludeDatabase" />
                                        <label class="form-check-label" for="includeDb">
                                            <strong>Include Database Support</strong>
                                        </label>
                                        <div class="form-text">Adds Entity Framework Core with DbContext</div>
                                    </div>

                                    <div class="form-check mb-3">
                                        <InputCheckbox id="includeApi" class="form-check-input" @bind-Value="config.IncludeApiControllers" />
                                        <label class="form-check-label" for="includeApi">
                                            <strong>Include API Controllers</strong>
                                        </label>
                                        <div class="form-text">Generates REST API controllers and client services</div>
                                    </div>

                                    <div class="form-check mb-3">
                                        <InputCheckbox id="includeSamples" class="form-check-input" @bind-Value="config.IncludeSampleComponents" />
                                        <label class="form-check-label" for="includeSamples">
                                            <strong>Include Sample Components</strong>
                                        </label>
                                        <div class="form-text">Adds example CRUD components</div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <h5>Database Configuration</h5>
                                    <div class="mb-3">
                                        <label for="dbProvider" class="form-label">Database Provider</label>
                                        <InputSelect id="dbProvider" class="form-select" @bind-Value="config.DatabaseProvider">
                                            <option value="@DatabaseProvider.SqlServer">SQL Server</option>
                                            <option value="@DatabaseProvider.SQLite">SQLite</option>
                                            <option value="@DatabaseProvider.PostgreSQL">PostgreSQL</option>
                                            <option value="@DatabaseProvider.None">No Database</option>
                                        </InputSelect>
                                    </div>

                                    @if (config.DatabaseProvider != DatabaseProvider.None)
                                    {
                                        <div class="mb-3">
                                            <label for="connectionName" class="form-label">Connection String Name</label>
                                            <InputText id="connectionName" class="form-control" @bind-Value="config.ConnectionStringName" />
                                            <div class="form-text">Name for the connection string in appsettings.json</div>
                                        </div>
                                    }

                                    <h5 class="mt-4">Advanced Options</h5>
                                    <div class="form-check mb-2">
                                        <InputCheckbox id="includeAspire" class="form-check-input" @bind-Value="config.UseAspireOrchestration" />
                                        <label class="form-check-label" for="includeAspire">
                                            <strong>Use .NET Aspire Orchestration</strong>
                                        </label>
                                    </div>

                                    <div class="form-check mb-2">
                                        <InputCheckbox id="includeDocker" class="form-check-input" @bind-Value="config.IncludeDockerSupport" />
                                        <label class="form-check-label" for="includeDocker">
                                            <strong>Include Docker Support</strong>
                                        </label>
                                    </div>

                                    <div class="form-check mb-2">
                                        <InputCheckbox id="includeTests" class="form-check-input" @bind-Value="config.IncludeTestProjects" />
                                        <label class="form-check-label" for="includeTests">
                                            <strong>Include Test Projects</strong>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @if (currentStep == 4)
                {
                    <div class="card shadow-sm">
                        <div class="card-header bg-success text-white">
                            <div class="d-flex align-items-center">
                                <div class="step-header-icon me-3">
                                    <i class="bi bi-check-circle-fill"></i>
                                </div>
                                <div>
                                    <h4 class="mb-0">Review & Generate Code</h4>
                                    <small class="opacity-75">Final review and complete project generation</small>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-8">
                                    <h5>Project Configuration Summary</h5>
                                    <table class="table table-sm">
                                        <tbody>
                                            <tr>
                                                <td><strong>Project Name:</strong></td>
                                                <td>@config.ProjectName</td>
                                            </tr>
                                            <tr>
                                                <td><strong>Root Namespace:</strong></td>
                                                <td>@config.RootNamespace</td>
                                            </tr>
                                            <tr>
                                                <td><strong>Output Directory:</strong></td>
                                                <td>@config.OutputDirectory</td>
                                            </tr>
                                            <tr>
                                                <td><strong>Platform Type:</strong></td>
                                                <td>@config.PlatformType.GetDisplayName()</td>
                                            </tr>
                                            <tr>
                                                <td><strong>Component Strategy:</strong></td>
                                                <td>@config.ComponentStrategy.GetDisplayName()</td>
                                            </tr>
                                            <tr>
                                                <td><strong>Rendering Mode:</strong></td>
                                                <td>@config.RenderingMode.GetDisplayName()</td>
                                            </tr>
                                            <tr>
                                                <td><strong>Database Provider:</strong></td>
                                                <td>@config.DatabaseProvider.GetDisplayName()</td>
                                            </tr>
                                        </tbody>
                                    </table>

                                    <h6 class="mt-3">Included Features:</h6>
                                    <ul class="list-unstyled">
                                        @if (config.IncludeAuthentication)
                                        {
                                            <li><i class="bi bi-check-circle-fill text-success"></i> Authentication & Identity</li>
                                        }
                                        @if (config.IncludeDatabase)
                                        {
                                            <li><i class="bi bi-check-circle-fill text-success"></i> Database Support (@config.DatabaseProvider.GetDisplayName())</li>
                                        }
                                        @if (config.IncludeApiControllers)
                                        {
                                            <li><i class="bi bi-check-circle-fill text-success"></i> API Controllers & Client Services</li>
                                        }
                                        @if (config.IncludeSampleComponents)
                                        {
                                            <li><i class="bi bi-check-circle-fill text-success"></i> Sample CRUD Components</li>
                                        }
                                        @if (config.UseAspireOrchestration)
                                        {
                                            <li><i class="bi bi-check-circle-fill text-success"></i> .NET Aspire Orchestration</li>
                                        }
                                        @if (config.IncludeDockerSupport)
                                        {
                                            <li><i class="bi bi-check-circle-fill text-success"></i> Docker Support</li>
                                        }
                                        @if (config.IncludeTestProjects)
                                        {
                                            <li><i class="bi bi-check-circle-fill text-success"></i> Test Projects</li>
                                        }
                                    </ul>
                                </div>

                                <div class="col-md-4">
                                    <div class="card bg-light">
                                        <div class="card-header">
                                            <h6>Generated Project Structure</h6>
                                        </div>
                                        <div class="card-body">
                                            <small class="font-monospace">
                                                @config.ProjectName/<br/>
                                                ├── @(config.ProjectName).sln<br/>
                                                ├── Framework/<br/>
                                                │   ├── Framework.Core/ <span class="text-success">✓ Enhanced</span><br/>
                                                │   └── SourceGenerator/ <span class="text-success">✓ New</span><br/>
                                                ├── Platform/<br/>
                                                │   ├── Platform.Common/<br/>
                                                @if (config.IncludeDatabase)
                                                {
                                                    <text>│   ├── Platform.Server.Data/<br/></text>
                                                }
                                                └── @config.ProjectName/<br/>
                                                    ├── @(config.ProjectName).ServiceContracts/ <span class="text-success">✓ New</span><br/>
                                                    ├── @(config.ProjectName).Client.Shared/ <span class="text-success">✓ New</span><br/>
                                                    ├── @(config.ProjectName).Server.DataServices/ <span class="text-success">✓ New</span><br/>
                                                    ├── WebPortal/<br/>
                                                    │   ├── @(config.ProjectName).WebPortal/<br/>
                                                    @if (config.RenderingMode == RenderingMode.Auto)
                                                    {
                                                        <text>│   ├── @(config.ProjectName).WebPortal.Client/<br/></text>
                                                    }
                                                    @if (config.ComponentStrategy == ComponentStrategy.CommonLibrary)
                                                    {
                                                        <text>│   └── @(config.ProjectName).WebPortal.Razor/<br/></text>
                                                    }
                                                    @if (config.PlatformType == PlatformType.WebAndMaui)
                                                    {
                                                        <text>└── MobileApp/<br/>
                                                            └── @(config.ProjectName).MauiApp/<br/></text>
                                                    }
                                            </small>
                                            <hr/>
                                            <h6 class="text-success">✨ Enhanced Features Included:</h6>
                                            <ul class="list-unstyled small">
                                                <li><i class="bi bi-check-circle-fill text-success"></i> Complete Framework.Core (ListingBase, FormBase)</li>
                                                <li><i class="bi bi-check-circle-fill text-success"></i> SourceGenerator with UI</li>
                                                <li><i class="bi bi-check-circle-fill text-success"></i> BaseHttpClient implementations</li>
                                                <li><i class="bi bi-check-circle-fill text-success"></i> Sample Product CRUD (working)</li>
                                                <li><i class="bi bi-check-circle-fill text-success"></i> Server-side services</li>
                                                <li><i class="bi bi-check-circle-fill text-success"></i> Client-side services</li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Enhanced Navigation -->
                <div class="card mt-4 border-0 bg-light">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                @if (currentStep > 1)
                                {
                                    <button type="button" class="btn btn-outline-secondary btn-lg" @onclick="PreviousStep">
                                        <i class="bi bi-arrow-left me-2"></i>Previous Step
                                    </button>
                                }
                                else
                                {
                                    <div></div>
                                }
                            </div>

                            <div class="text-center">
                                <div class="small text-muted mb-1">Step @currentStep of @totalSteps</div>
                                <div class="fw-bold">@GetStepTitle(currentStep)</div>
                                @if (!string.IsNullOrEmpty(GetStepValidationMessage(currentStep)))
                                {
                                    <div class="small text-danger mt-1">
                                        <i class="bi bi-exclamation-triangle me-1"></i>@GetStepValidationMessage(currentStep)
                                    </div>
                                }
                            </div>

                            <div>
                                @if (currentStep < totalSteps)
                                {
                                    var canProceed = CanProceedToNextStep();
                                    <button type="button" class="btn @(canProceed ? "btn-dark" : "btn-outline-dark") btn-lg"
                                            @onclick="NextStep" disabled="@(!canProceed)">
                                        Next Step<i class="bi bi-arrow-right ms-2"></i>
                                    </button>
                                    @if (!canProceed)
                                    {
                                        <div class="small text-muted mt-1 text-end">
                                            Complete required fields to continue
                                        </div>
                                    }
                                }
                                else
                                {
                                    var canGenerate = CanGenerateProject();
                                    <button type="submit" class="btn @(canGenerate ? "btn-success" : "btn-outline-success") btn-lg"
                                            disabled="@(!canGenerate || isGenerating)">
                                        @if (isGenerating)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            <text>Generating...</text>
                                        }
                                        else
                                        {
                                            <i class="bi bi-magic me-2"></i>
                                            <text>Generate Project</text>
                                        }
                                    </button>
                                    @if (!canGenerate && !isGenerating)
                                    {
                                        <div class="small text-muted mt-1 text-end">
                                            Review configuration to generate
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Success Message Component -->
@if (showSuccessMessage && generationResult != null && generationResult.Success)
{
    <div class="container-fluid mt-4">
        <div class="row justify-content-center">
            <div class="col-lg-10">
                <div class="card shadow-lg border-success">
                    <div class="card-header bg-success text-white">
                        <div class="d-flex align-items-center">
                            <div class="me-3">
                                <i class="bi bi-check-circle-fill fs-2"></i>
                            </div>
                            <div>
                                <h3 class="mb-0">🎉 Project Generated Successfully!</h3>
                                <p class="mb-0 opacity-75">Your complete Blazor solution is ready for download</p>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <h5 class="text-success mb-3">
                                    <i class="bi bi-info-circle me-2"></i>Project Summary
                                </h5>
                                <div class="row mb-3">
                                    <div class="col-sm-4"><strong>Project Name:</strong></div>
                                    <div class="col-sm-8">@config.ProjectName</div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-sm-4"><strong>Files Generated:</strong></div>
                                    <div class="col-sm-8">@generationResult.GeneratedFiles.Count files</div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-sm-4"><strong>Root Namespace:</strong></div>
                                    <div class="col-sm-8">@config.RootNamespace</div>
                                </div>

                                <h6 class="text-success mt-4 mb-2">
                                    <i class="bi bi-list-check me-2"></i>Generated Components:
                                </h6>
                                <ul class="list-unstyled">
                                    <li><i class="bi bi-check-circle-fill text-success me-2"></i>Complete Framework.Core with ListingBase/FormBase</li>
                                    <li><i class="bi bi-check-circle-fill text-success me-2"></i>Functional SourceGenerator project</li>
                                    <li><i class="bi bi-check-circle-fill text-success me-2"></i>BaseHttpClient implementations</li>
                                    <li><i class="bi bi-check-circle-fill text-success me-2"></i>Working Sample Product CRUD</li>
                                    <li><i class="bi bi-check-circle-fill text-success me-2"></i>Platform projects with DbContext</li>
                                    <li><i class="bi bi-check-circle-fill text-success me-2"></i>Ready-to-use project structure</li>
                                </ul>
                            </div>
                            <div class="col-md-4">
                                <div class="text-center">
                                    <div class="alert alert-info">
                                        <i class="bi bi-download fs-1 text-primary"></i>
                                        <h6 class="mt-2">Download Status</h6>
                                        <p class="mb-0 small">Your project zip file has been automatically downloaded!</p>
                                    </div>

                                    <button type="button" class="btn btn-primary btn-lg mb-3" onclick="@StartNewProject">
                                        <i class="bi bi-plus-circle me-2"></i>Start New Project
                                    </button>

                                    <div class="small text-muted">
                                        Ready to create another project? Click above to start over.
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private ProjectConfiguration config = new();
    private int currentStep = 1;
    private bool isGenerating = false;
    private ProjectGenerationResult? generationResult;
    private bool requireValidation = true;
    private bool showSuccessMessage = false;

    // Step configuration
    private readonly int totalSteps = 4;
    private readonly Dictionary<int, string> stepTitles = new()
    {
        { 1, "Project Information" },
        { 2, "Platform & Architecture" },
        { 3, "Features & Database" },
        { 4, "Review & Generate Code" }
    };

    private readonly Dictionary<int, string> stepDescriptions = new()
    {
        { 1, "Basic project details" },
        { 2, "Platform and architecture choices" },
        { 3, "Database and feature selection" },
        { 4, "Final review and code generation" }
    };

    // Navigation methods
    private void NavigateToStep(int step)
    {
        if (step <= currentStep || !requireValidation)
        {
            currentStep = step;
        }
    }

    private void NextStep()
    {
        if (currentStep < totalSteps && CanProceedToNextStep())
        {
            currentStep++;
        }
    }

    private void PreviousStep()
    {
        if (currentStep > 1)
        {
            currentStep--;
        }
    }

    // Helper methods for UI
    private string GetStepTitle(int step) => stepTitles.GetValueOrDefault(step, $"Step {step}");
    private string GetStepDescription(int step) => stepDescriptions.GetValueOrDefault(step, "");

    private string GetStepIndicatorClass(int step)
    {
        if (step < currentStep) return "bg-success text-white";
        if (step == currentStep) return "bg-dark text-white";
        return "bg-light text-muted border";
    }

    private string GetStepNavClass(int step)
    {
        if (step == currentStep) return "active";
        if (step < currentStep) return "list-group-item-success";
        return "";
    }

    private string GetStepNavIndicatorClass(int step)
    {
        var baseClass = "rounded-circle d-flex align-items-center justify-content-center";
        baseClass += " " + (step < currentStep ? "bg-success text-white" :
                           step == currentStep ? "bg-dark text-white" : "bg-light text-muted");
        return baseClass;
    }

    private string GetValidationClass(Expression<Func<string>> property)
    {
        var propertyName = ((MemberExpression)property.Body).Member.Name;
        // Simple validation - you could enhance this with more sophisticated validation
        var value = property.Compile()();
        return string.IsNullOrWhiteSpace(value) ? "is-invalid" : "is-valid";
    }

    private int GetSelectedFeaturesCount()
    {
        int count = 0;
        if (config.IncludeAuthentication) count++;
        if (config.IncludeDatabase) count++;
        if (config.IncludeApiControllers) count++;
        if (config.IncludeSampleComponents) count++;
        if (config.UseAspireOrchestration) count++;
        if (config.IncludeDockerSupport) count++;
        if (config.IncludeTestProjects) count++;
        return count;
    }

    // Validation methods
    private bool CanProceedToNextStep()
    {
        return currentStep switch
        {
            1 => !string.IsNullOrWhiteSpace(config.ProjectName) &&
                 !string.IsNullOrWhiteSpace(config.RootNamespace) &&
                 !string.IsNullOrWhiteSpace(config.OutputDirectory),
            2 => true, // Platform selection always has a default
            3 => true, // Feature selection is optional
            4 => true, // Review step - ready to generate
            _ => true
        };
    }

    private bool CanGenerateProject()
    {
        return !string.IsNullOrWhiteSpace(config.ProjectName) &&
               !string.IsNullOrWhiteSpace(config.RootNamespace) &&
               !string.IsNullOrWhiteSpace(config.OutputDirectory);
    }

    private string GetStepValidationMessage(int step)
    {
        if (!CanProceedToNextStep() && step == currentStep)
        {
            return step switch
            {
                1 => "Please fill in all required fields",
                _ => ""
            };
        }
        return "";
    }

    // Utility methods
    private void SyncNamespaceFromProject()
    {
        if (!string.IsNullOrWhiteSpace(config.ProjectName))
        {
            if (string.IsNullOrWhiteSpace(config.RootNamespace))
            {
                config.RootNamespace = config.ProjectName;
            }

            // Automatically set output path
            SetAutomaticOutputPath();
        }
    }

    private void SetAutomaticOutputPath()
    {
        if (!string.IsNullOrEmpty(config.ProjectName))
        {
            // Set output path to current directory + project name
            var currentDirectory = Directory.GetCurrentDirectory();
            config.OutputDirectory = Path.Combine(currentDirectory, config.ProjectName);
        }
    }

    private async Task HandleValidSubmit()
    {
        isGenerating = true;
        generationResult = null;
        showSuccessMessage = false;

        try
        {
            // Generate the project using the enhanced service for complete solution
            generationResult = await EnhancedProjectGenerator.GenerateProjectAsync(config);

            if (generationResult.Success)
            {
                // Show success message UI
                showSuccessMessage = true;

                // Trigger automatic download if zip data is available
                if (generationResult.ZipData != null && !string.IsNullOrEmpty(generationResult.ZipFileName))
                {
                    await DownloadZipFile(generationResult.ZipData, generationResult.ZipFileName);
                }

                StateHasChanged();
            }
            else
            {
                var errorMessage = $"❌ Project generation failed:\n\n{generationResult.Message}";
                if (generationResult.Errors.Any())
                {
                    errorMessage += "\n\nErrors:\n" + string.Join("\n", generationResult.Errors);
                }
                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"❌ An error occurred during project generation:\n\n{ex.Message}");
        }
        finally
        {
            isGenerating = false;
        }
    }

    private async Task DownloadZipFile(byte[] zipData, string fileName)
    {
        try
        {
            var base64String = Convert.ToBase64String(zipData);
            await JSRuntime.InvokeVoidAsync("downloadFileFromBase64", base64String, fileName, "application/zip");
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Error downloading zip file");
            await JSRuntime.InvokeVoidAsync("alert", $"Error downloading file: {ex.Message}");
        }
    }

    private void StartNewProject()
    {
        // Reset all state
        config = new ProjectConfiguration();
        currentStep = 1;
        isGenerating = false;
        generationResult = null;
        showSuccessMessage = false;
        requireValidation = true;

        StateHasChanged();
    }
}

<script>
    window.downloadFileFromBase64 = function (base64Data, fileName, contentType) {
        try {
            // Convert base64 to binary
            const byteCharacters = atob(base64Data);
            const byteNumbers = new Array(byteCharacters.length);
            for (let i = 0; i < byteCharacters.length; i++) {
                byteNumbers[i] = byteCharacters.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);

            // Create blob and download
            const blob = new Blob([byteArray], { type: contentType });
            const url = URL.createObjectURL(blob);

            // Create temporary download link
            const link = document.createElement('a');
            link.href = url;
            link.download = fileName;
            link.style.display = 'none';

            // Trigger download
            document.body.appendChild(link);
            link.click();

            // Cleanup
            document.body.removeChild(link);
            URL.revokeObjectURL(url);

            console.log('File download triggered:', fileName);
        } catch (error) {
            console.error('Error downloading file:', error);
            alert('Error downloading file: ' + error.message);
        }
    };
</script>
