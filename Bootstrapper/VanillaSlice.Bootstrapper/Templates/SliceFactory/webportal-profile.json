{
  "Profiles": [
    {
      "Id": 1,
      "Name": "{{ProjectName}}",
      "FrameworkNamespaces": "{{RootNamespace}}.Framework",
      "DbContextNamespaces": "{{RootNamespace}}.Server.Data.EF",
      "UIFramework": "{{UIFramework}}",
      "Projects": [
        {
          "Path": "{{ProjectName}}.Platform\\{{ProjectName}}.ServiceContracts\\Features",
          "NameSpace": "{{RootNamespace}}.ServiceContracts.Features",
          "ProjectType": 2
        },
        {
          "Path": "{{ProjectName}}.Platform\\{{ProjectName}}.Server.DataServices\\Controllers",
          "NameSpace": "{{RootNamespace}}.Server.DataServices.Controllers",
          "ProjectType": 5
        },
        {
          "Path": "{{ProjectName}}.Platform\\{{ProjectName}}.Client.Shared\\Features",
          "NameSpace": "{{RootNamespace}}.Client.Shared.Features",
          "ProjectType": 8
        },
        {
          "Path": "{{ProjectName}}.Platform\\{{ProjectName}}.Razor\\Features",
          "NameSpace": "{{RootNamespace}}.Razor.Features",
          "ProjectType": 6
        },
        {
          "Path": "{{ProjectName}}.Platform\\{{ProjectName}}.Server.DataServices\\Features",
          "NameSpace": "{{RootNamespace}}.Server.DataServices.Features",
          "ProjectType": 3
        }
      ]
    }
  ],
  "ProjectFiles": {
    "2": [
      {
        "FileName": "I##ComponentPrefix##ListingDataService.cs",
        "FileCategory": 1,
        "Content": [
          "using {{RootNamespace}}.Framework;",
          "",
          "namespace ##projectNamespace##;",
          "",
          "public interface I##ComponentPrefix##ListingDataService :",
          "    IListingDataService<##ComponentPrefix##ListingBusinessModel, ##ComponentPrefix##FilterBusinessModel>",
          "{",
          "    //Add any custom methods here",
          "}"
        ]
      },
      {
        "FileName": "I##ComponentPrefix##FormDataService.cs",
        "FileCategory": 2,
        "Content": [
          "using {{RootNamespace}}.Framework;",
          "",
          "namespace ##projectNamespace##;",
          "",
          "public interface I##ComponentPrefix##FormDataService :",
          "    IFormDataService<##ComponentPrefix##FormBusinessModel, ##primaryKeyType##>",
          "{",
          "    //Add any custom methods here",
          "}"
        ]
      },
      {
        "FileName": "##ComponentPrefix##ListingBusinessModel.cs",
        "FileCategory": 1,
        "Content": [
          "using {{RootNamespace}}.Framework;",
          "",
          "namespace ##projectNamespace##;",
          "",
          "public class ##ComponentPrefix##ListingBusinessModel : BusinessModelBase",
          "{",
          "    public ##primaryKeyType## Id { get; set; }",
          "    public string Name { get; set; } = string.Empty;",
          "    public string? Description { get; set; }",
          "    // Add other properties as needed",
          "}"
        ]
      },
      {
        "FileName": "##ComponentPrefix##FilterBusinessModel.cs",
        "FileCategory": 1,
        "Content": [
          "using {{RootNamespace}}.Framework;",
          "",
          "namespace ##projectNamespace##;",
          "",
          "public class ##ComponentPrefix##FilterBusinessModel : FilterBusinessModelBase",
          "{",
          "    public string? Name { get; set; }",
          "    // Add other filter properties as needed",
          "}"
        ]
      },
      {
        "FileName": "##ComponentPrefix##FormBusinessModel.cs",
        "FileCategory": 2,
        "Content": [
          "using System.ComponentModel.DataAnnotations;",
          "using {{RootNamespace}}.Framework;",
          "",
          "namespace ##projectNamespace##;",
          "",
          "public class ##ComponentPrefix##FormBusinessModel : BusinessModelBase",
          "{",
          "    public ##primaryKeyType##? Id { get; set; }",
          "",
          "    [Required, MaxLength(450)]",
          "    public string Name { get; set; } = string.Empty;",
          "",
          "    [MaxLength(4000)]",
          "    public string? Description { get; set; }",
          "",
          "    // Add other properties as needed",
          "}"
        ]
      }
    ],
    "5": [
      {
        "FileName": "##ComponentPrefix##sListingController.cs",
        "FileCategory": 1,
        "Content": [
          "using Microsoft.AspNetCore.Mvc;",
          "using {{RootNamespace}}.ServiceContracts.Features.##moduleNamespace##;",
          "",
          "namespace ##projectNamespace##;",
          "",
          "[ApiController]",
          "[Route(\"api/[controller]\")]",
          "public class ##ComponentPrefix##sListingController : ControllerBase",
          "{",
          "    private readonly I##ComponentPrefix##ListingDataService _service;",
          "",
          "    public ##ComponentPrefix##sListingController(I##ComponentPrefix##ListingDataService service)",
          "    {",
          "        _service = service;",
          "    }",
          "",
          "    [HttpGet(\"GetPaginatedItems\")]",
          "    public async Task<IActionResult> GetPaginatedItems([FromQuery] ##ComponentPrefix##FilterBusinessModel filter)",
          "    {",
          "        var result = await _service.GetPaginatedItems(filter);",
          "        return Ok(result);",
          "    }",
          "}"
        ]
      },
      {
        "FileName": "##ComponentPrefix##FormController.cs",
        "FileCategory": 2,
        "Content": [
          "using Microsoft.AspNetCore.Mvc;",
          "using {{RootNamespace}}.ServiceContracts.Features.##moduleNamespace##;",
          "",
          "namespace ##projectNamespace##;",
          "",
          "[ApiController]",
          "[Route(\"api/[controller]\")]",
          "public class ##ComponentPrefix##FormController : ControllerBase",
          "{",
          "    private readonly I##ComponentPrefix##FormDataService _service;",
          "",
          "    public ##ComponentPrefix##FormController(I##ComponentPrefix##FormDataService service)",
          "    {",
          "        _service = service;",
          "    }",
          "",
          "    [HttpGet(\"{id}\")]",
          "    public async Task<IActionResult> GetById(##primaryKeyType## id)",
          "    {",
          "        var result = await _service.GetByIdAsync(id);",
          "        return Ok(result);",
          "    }",
          "",
          "    [HttpPost]",
          "    public async Task<IActionResult> Create([FromBody] ##ComponentPrefix##FormBusinessModel model)",
          "    {",
          "        var result = await _service.CreateAsync(model);",
          "        return Ok(result);",
          "    }",
          "",
          "    [HttpPut(\"{id}\")]",
          "    public async Task<IActionResult> Update(##primaryKeyType## id, [FromBody] ##ComponentPrefix##FormBusinessModel model)",
          "    {",
          "        model.Id = id;",
          "        var result = await _service.UpdateAsync(model);",
          "        return Ok(result);",
          "    }",
          "",
          "    [HttpDelete(\"{id}\")]",
          "    public async Task<IActionResult> Delete(##primaryKeyType## id)",
          "    {",
          "        await _service.DeleteAsync(id);",
          "        return NoContent();",
          "    }",
          "}"
        ]
      }
    ],
    "8": [
      {
        "FileName": "##ComponentPrefix##ListingClientDataService.cs",
        "FileCategory": 1,
        "Content": [
          "using {{RootNamespace}}.Framework;",
          "using {{RootNamespace}}.Framework.Extensions;",
          "using {{RootNamespace}}.ServiceContracts.Features.##moduleNamespace##;",
          "",
          "namespace ##projectNamespace##;",
          "",
          "internal class ##ComponentPrefix##ListingClientDataService : I##ComponentPrefix##ListingDataService",
          "{",
          "    private readonly BaseHttpClient httpClient;",
          "",
          "    public ##ComponentPrefix##ListingClientDataService(BaseHttpClient httpClient)",
          "    {",
          "        this.httpClient = httpClient;",
          "    }",
          "",
          "    public async Task<PagedDataList<##ComponentPrefix##ListingBusinessModel>> GetPaginatedItems(##ComponentPrefix##FilterBusinessModel filter)",
          "    {",
          "        var result = await httpClient.GetFromJsonAsync<PagedDataList<##ComponentPrefix##ListingBusinessModel>>(",
          "            $\"api/##ComponentPrefix##sListing/GetPaginatedItems{filter.ToQueryString()}\");",
          "        return result ?? new PagedDataList<##ComponentPrefix##ListingBusinessModel>();",
          "    }",
          "}"
        ]
      },
      {
        "FileName": "##ComponentPrefix##FormClientDataService.cs",
        "FileCategory": 2,
        "Content": [
          "using {{RootNamespace}}.Framework;",
          "using {{RootNamespace}}.ServiceContracts.Features.##moduleNamespace##;",
          "",
          "namespace ##projectNamespace##;",
          "",
          "internal class ##ComponentPrefix##FormClientDataService : I##ComponentPrefix##FormDataService",
          "{",
          "    private readonly BaseHttpClient httpClient;",
          "",
          "    public ##ComponentPrefix##FormClientDataService(BaseHttpClient httpClient)",
          "    {",
          "        this.httpClient = httpClient;",
          "    }",
          "",
          "    public async Task<##ComponentPrefix##FormBusinessModel?> GetByIdAsync(##primaryKeyType## id)",
          "    {",
          "        return await httpClient.GetFromJsonAsync<##ComponentPrefix##FormBusinessModel>($\"api/##ComponentPrefix##Form/{id}\");",
          "    }",
          "",
          "    public async Task<##primaryKeyType##> CreateAsync(##ComponentPrefix##FormBusinessModel model)",
          "    {",
          "        var response = await httpClient.PostAsJsonAsync(\"api/##ComponentPrefix##Form\", model);",
          "        return await response.Content.ReadFromJsonAsync<##primaryKeyType##>();",
          "    }",
          "",
          "    public async Task<##primaryKeyType##> UpdateAsync(##ComponentPrefix##FormBusinessModel model)",
          "    {",
          "        var response = await httpClient.PutAsJsonAsync($\"api/##ComponentPrefix##Form/{model.Id}\", model);",
          "        return await response.Content.ReadFromJsonAsync<##primaryKeyType##>();",
          "    }",
          "",
          "    public async Task DeleteAsync(##primaryKeyType## id)",
          "    {",
          "        await httpClient.DeleteAsync($\"api/##ComponentPrefix##Form/{id}\");",
          "    }",
          "}"
        ]
      }
    ],
    "6": [
      {
        "FileName": "##ComponentPrefix##Listing\\##ComponentPrefix##Listing.razor",
        "FileCategory": 1,
        "Content": [
          "@using {{RootNamespace}}.Framework",
          "@using {{RootNamespace}}.ServiceContracts.Features.##moduleNamespace##",
          "@page \"/##componentPrefixPlural##\"",
          "@inherits ListingBase<##ComponentPrefix##ListingViewModel, ##ComponentPrefix##ListingBusinessModel,",
          "                                ##ComponentPrefix##FilterViewModel, ##ComponentPrefix##FilterBusinessModel, I##ComponentPrefix##ListingDataService>",
          "",
          "<div class=\"container-fluid\">",
          "    <!-- Page Header -->",
          "    <div class=\"d-flex justify-content-between align-items-center mb-4\">",
          "        <div>",
          "            <h2 class=\"mb-1\">##ComponentPrefix## Catalog</h2>",
          "            <p class=\"text-muted mb-0\">Manage your ##componentPrefixPlural##</p>",
          "        </div>",
          "        <a class=\"btn btn-primary btn-lg shadow-sm\" href=\"/##componentPrefixPlural##/create\">",
          "            <i class=\"bi bi-plus-circle me-2\"></i>Add New ##ComponentPrefix##",
          "        </a>",
          "    </div>",
          "",
          "    <!-- Items Grid -->",
          "    @if (Items?.Any() == true)",
          "    {",
          "        <div class=\"row g-4\">",
          "            @foreach(var item in Items)",
          "            {",
          "                <div class=\"col-12 col-md-6 col-lg-4\">",
          "                    <div class=\"card h-100 shadow-sm border-1 item-card\">",
          "                        <div class=\"card-body d-flex flex-column\">",
          "                            <!-- Item Header -->",
          "                            <div class=\"d-flex justify-content-between align-items-start mb-3\">",
          "                                <h5 class=\"card-title mb-0 text-truncate\" title=\"@item.Name\">@item.Name</h5>",
          "                            </div>",
          "",
          "                            <!-- Description -->",
          "                            @if (!string.IsNullOrEmpty(item.Description))",
          "                            {",
          "                                <p class=\"card-text text-muted mb-3 flex-grow-1\">",
          "                                    @(item.Description.Length > 100 ? item.Description.Substring(0, 100) + \"...\" : item.Description)",
          "                                </p>",
          "                            }",
          "",
          "                            <!-- Actions -->",
          "                            <div class=\"d-flex gap-2 mt-auto\">",
          "                                <a href=\"/##componentPrefix##s/edit/@item.Id\" class=\"btn btn-outline-primary btn-sm flex-fill\">",
          "                                    <i class=\"bi bi-pencil me-1\"></i>Edit",
          "                                </a>",
          "                                <button class=\"btn btn-outline-danger btn-sm\" @onclick=\"() => DeleteItem(item.Id)\">",
          "                                    <i class=\"bi bi-trash me-1\"></i>Delete",
          "                                </button>",
          "                            </div>",
          "                        </div>",
          "                    </div>",
          "                </div>",
          "            }",
          "        </div>",
          "    }",
          "    else",
          "    {",
          "        <div class=\"text-center py-5\">",
          "            <i class=\"bi bi-inbox display-1 text-muted mb-3\"></i>",
          "            <h3 class=\"text-muted\">No ##componentPrefixPlural## found</h3>",
          "            <p class=\"text-muted mb-4\">Get started by creating your first ##componentPrefix##.</p>",
          "            <a class=\"btn btn-primary\" href=\"/##componentPrefixPlural##/create\">",
          "                <i class=\"bi bi-plus-circle me-2\"></i>Add New ##ComponentPrefix##",
          "            </a>",
          "        </div>",
          "    }",
          "</div>",
          "",
          "@code {",
          "    private async Task DeleteItem(##primaryKeyType## id)",
          "    {",
          "        if (await JSRuntime.InvokeAsync<bool>(\"confirm\", \"Are you sure you want to delete this ##componentPrefix##?\"))",
          "        {",
          "            await LoadDataAsync();",
          "        }",
          "    }",
          "}"
        ]
      },
      {
        "FileName": "##ComponentPrefix##Form\\##ComponentPrefix##Form.razor",
        "FileCategory": 2,
        "Content": [
          "@page \"/##componentPrefixPlural##/create\"",
          "@page \"/##componentPrefixPlural##/edit/{Id}\"",
          "@using Microsoft.Extensions.DependencyInjection",
          "@using Microsoft.AspNetCore.Components.Forms",
          "@using {{RootNamespace}}.Framework",
          "@using {{RootNamespace}}.ServiceContracts.Features.##moduleNamespace##",
          "",
          "@inherits FormBase<##ComponentPrefix##FormViewModel, ##ComponentPrefix##FormBusinessModel, ##primaryKeyType##, I##ComponentPrefix##FormDataService>",
          "",
          "<div class=\"container-fluid py-4\">",
          "    <div class=\"row justify-content-center\">",
          "        <div class=\"col-lg-8\">",
          "            <!-- Header -->",
          "            <div class=\"d-flex justify-content-between align-items-center mb-4\">",
          "                <div>",
          "                    <h2 class=\"mb-1\">@(IsEditMode ? \"Edit ##ComponentPrefix##\" : \"Create New ##ComponentPrefix##\")</h2>",
          "                    <p class=\"text-muted mb-0\">@(IsEditMode ? \"Update ##componentPrefix## information\" : \"Add a new ##componentPrefix## to your catalog\")</p>",
          "                </div>",
          "                <a class=\"btn btn-outline-secondary\" href=\"/##componentPrefix##s\">",
          "                    <i class=\"bi bi-arrow-left me-2\"></i>Back to List",
          "                </a>",
          "            </div>",
          "",
          "            <!-- Form Card -->",
          "            <div class=\"card shadow-sm border-0\">",
          "                <div class=\"card-body p-4\">",
          "                    <EditForm Model=\"@SelectedItem\" OnValidSubmit=\"SaveAsync\" FormName=\"_##ComponentPrefix##Form\">",
          "                        <DataAnnotationsValidator />",
          "",
          "                        <!-- Error Message -->",
          "                        @if (!string.IsNullOrEmpty(ErrorMessage))",
          "                        {",
          "                            <div class=\"alert alert-danger d-flex align-items-center mb-4\" role=\"alert\">",
          "                                <i class=\"bi bi-exclamation-triangle-fill me-2\"></i>",
          "                                <div>@ErrorMessage</div>",
          "                            </div>",
          "                        }",
          "",
          "                        <div class=\"row g-3\">",
          "                            <!-- Name Field -->",
          "                            <div class=\"col-12\">",
          "                                <label class=\"form-label fw-semibold\">Name <span class=\"text-danger\">*</span></label>",
          "                                <InputText class=\"form-control\" @bind-Value=\"SelectedItem.Name\" placeholder=\"Enter ##componentPrefix## name\" />",
          "                                <ValidationMessage For=\"@(() => SelectedItem.Name)\" class=\"text-danger small\" />",
          "                            </div>",
          "",
          "                            <!-- Description Field -->",
          "                            <div class=\"col-12\">",
          "                                <label class=\"form-label fw-semibold\">Description</label>",
          "                                <InputTextArea class=\"form-control\" @bind-Value=\"SelectedItem.Description\" rows=\"4\" placeholder=\"Enter ##componentPrefix## description (optional)\" />",
          "                                <ValidationMessage For=\"@(() => SelectedItem.Description)\" class=\"text-danger small\" />",
          "                            </div>",
          "                        </div>",
          "",
          "                        <hr class=\"my-4\" />",
          "",
          "                        <!-- Form Actions -->",
          "                        <div class=\"d-flex gap-2 justify-content-end\">",
          "                            <a class=\"btn btn-outline-secondary\" href=\"/##componentPrefix##s\">Cancel</a>",
          "                            <button type=\"submit\" class=\"btn btn-primary\" disabled=\"@IsLoading\">",
          "                                @if (IsLoading)",
          "                                {",
          "                                    <span class=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>",
          "                                }",
          "                                <i class=\"bi bi-check-circle me-2\"></i>",
          "                                @(IsEditMode ? \"Update ##ComponentPrefix##\" : \"Create ##ComponentPrefix##\")",
          "                            </button>",
          "                        </div>",
          "                    </EditForm>",
          "                </div>",
          "            </div>",
          "        </div>",
          "    </div>",
          "</div>",
          "",
          "@code {",
          "    [Parameter] public string? Id { get; set; }",
          "",
          "    protected override Task OnSelectedItemInitialized(IServiceScope scope)",
          "    {",
          "        return Task.CompletedTask;",
          "    }",
          "",
          "    public override Task OnAfterSaveAsync(##primaryKeyType## key)",
          "    {",
          "        if (key != null)",
          "        {",
          "            NavigationManager.NavigateTo(\"/##componentPrefix##s\");",
          "        }",
          "        return Task.CompletedTask;",
          "    }",
          "}"
        ]
      },
      {
        "FileName": "##ComponentPrefix##Form\\##ComponentPrefix##FormViewModel.cs",
        "FileCategory": 2,
        "Content": [
          "using System.ComponentModel.DataAnnotations;",
          "using {{RootNamespace}}.Framework;",
          "",
          "namespace ##projectNamespace##;",
          "",
          "public class ##ComponentPrefix##FormViewModel : ObservableBase",
          "{",
          "    public ##primaryKeyType##? Id { get; set; }",
          "",
          "    [Required, MaxLength(450)]",
          "    public string Name { get; set; } = string.Empty;",
          "",
          "    [MaxLength(4000)]",
          "    public string? Description { get; set; }",
          "}"
        ]
      },
      {
        "FileName": "##ComponentPrefix##Listing\\##ComponentPrefix##ListingViewModel.cs",
        "FileCategory": 1,
        "Content": [
          "using {{RootNamespace}}.Framework;",
          "",
          "namespace ##projectNamespace##;",
          "",
          "public class ##ComponentPrefix##ListingViewModel : ObservableBase",
          "{",
          "    public ##primaryKeyType## Id { get; set; }",
          "    public string Name { get; set; } = string.Empty;",
          "    public string? Description { get; set; }",
          "}"
        ]
      },
      {
        "FileName": "##ComponentPrefix##Listing\\##ComponentPrefix##FilterViewModel.cs",
        "FileCategory": 1,
        "Content": [
          "using {{RootNamespace}}.Framework;",
          "",
          "namespace ##projectNamespace##;",
          "",
          "public class ##ComponentPrefix##FilterViewModel : FilterViewModelBase",
          "{",
          "    public string? Name { get; set; }",
          "}"
        ]
      }
    ],
    "3": [
      {
        "FileName": "##ComponentPrefix##ListingDataService.cs",
        "FileCategory": 1,
        "Content": [
          "using Microsoft.EntityFrameworkCore;",
          "using {{RootNamespace}}.Framework;",
          "using {{RootNamespace}}.Server.Data.EF;",
          "using {{RootNamespace}}.ServiceContracts.Features.##moduleNamespace##;",
          "",
          "namespace ##projectNamespace##;",
          "",
          "internal class ##ComponentPrefix##ListingDataService : I##ComponentPrefix##ListingDataService",
          "{",
          "    private readonly AppDbContext _context;",
          "",
          "    public ##ComponentPrefix##ListingDataService(AppDbContext context)",
          "    {",
          "        _context = context;",
          "    }",
          "",
          "    public async Task<PagedDataList<##ComponentPrefix##ListingBusinessModel>> GetPaginatedItems(##ComponentPrefix##FilterBusinessModel filter)",
          "    {",
          "        var query = _context.##ComponentPrefix##s.AsQueryable();",
          "",
          "        if (!string.IsNullOrEmpty(filter.Name))",
          "        {",
          "            query = query.Where(x => x.Name.Contains(filter.Name));",
          "        }",
          "",
          "        var totalCount = await query.CountAsync();",
          "        var items = await query",
          "            .Skip((filter.PageNumber - 1) * filter.PageSize)",
          "            .Take(filter.PageSize)",
          "            .Select(x => new ##ComponentPrefix##ListingBusinessModel",
          "            {",
          "                Id = x.Id,",
          "                Name = x.Name,",
          "                Description = x.Description",
          "            })",
          "            .ToListAsync();",
          "",
          "        return new PagedDataList<##ComponentPrefix##ListingBusinessModel>",
          "        {",
          "            Items = items,",
          "            TotalCount = totalCount,",
          "            PageNumber = filter.PageNumber,",
          "            PageSize = filter.PageSize",
          "        };",
          "    }",
          "}"
        ]
      },
      {
        "FileName": "##ComponentPrefix##FormDataService.cs",
        "FileCategory": 2,
        "Content": [
          "using Microsoft.EntityFrameworkCore;",
          "using {{RootNamespace}}.Framework;",
          "using {{RootNamespace}}.Server.Data.EF;",
          "using {{RootNamespace}}.ServiceContracts.Features.##moduleNamespace##;",
          "",
          "namespace ##projectNamespace##;",
          "",
          "internal class ##ComponentPrefix##FormDataService : I##ComponentPrefix##FormDataService",
          "{",
          "    private readonly AppDbContext _context;",
          "",
          "    public ##ComponentPrefix##FormDataService(AppDbContext context)",
          "    {",
          "        _context = context;",
          "    }",
          "",
          "    public async Task<##ComponentPrefix##FormBusinessModel?> GetByIdAsync(##primaryKeyType## id)",
          "    {",
          "        var entity = await _context.##ComponentPrefix##s.FindAsync(id);",
          "        if (entity == null) return null;",
          "",
          "        return new ##ComponentPrefix##FormBusinessModel",
          "        {",
          "            Id = entity.Id,",
          "            Name = entity.Name,",
          "            Description = entity.Description",
          "        };",
          "    }",
          "",
          "    public async Task<##primaryKeyType##> CreateAsync(##ComponentPrefix##FormBusinessModel model)",
          "    {",
          "        var entity = new ##ComponentPrefix##Entity",
          "        {",
          "            Name = model.Name,",
          "            Description = model.Description",
          "        };",
          "",
          "        _context.##ComponentPrefix##s.Add(entity);",
          "        await _context.SaveChangesAsync();",
          "        return entity.Id;",
          "    }",
          "",
          "    public async Task<##primaryKeyType##> UpdateAsync(##ComponentPrefix##FormBusinessModel model)",
          "    {",
          "        var entity = await _context.##ComponentPrefix##s.FindAsync(model.Id);",
          "        if (entity == null) throw new InvalidOperationException(\"##ComponentPrefix## not found\");",
          "",
          "        entity.Name = model.Name;",
          "        entity.Description = model.Description;",
          "",
          "        await _context.SaveChangesAsync();",
          "        return entity.Id;",
          "    }",
          "",
          "    public async Task DeleteAsync(##primaryKeyType## id)",
          "    {",
          "        var entity = await _context.##ComponentPrefix##s.FindAsync(id);",
          "        if (entity != null)",
          "        {",
          "            _context.##ComponentPrefix##s.Remove(entity);",
          "            await _context.SaveChangesAsync();",
          "        }",
          "    }",
          "}"
        ]
      }
    ]
  }
}
