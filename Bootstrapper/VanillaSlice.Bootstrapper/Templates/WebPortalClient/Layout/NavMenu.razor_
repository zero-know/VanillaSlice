@implements IDisposable
@inject NavigationManager NavigationManager

{{#if (eq UIFramework "Bootstrap")}}
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">LOGO</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable bg-dark" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="products">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Products
            </NavLink>
        </div>

        @* ##MenuItem## *@

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                @*<div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>*@
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>
{{/if}}

{{#if (eq UIFramework "FluentUI")}}
<div class="navmenu">
    <input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />
    <label for="navmenu-toggle" class="navmenu-icon"><FluentIcon Value="@(new Icons.Regular.Size20.Navigation())" Color="Color.Fill" /></label>
    <nav class="sitenav" aria-labelledby="main-menu">
        <FluentNavMenu Id="main-menu" Width="250" Collapsible="true" Title="Navigation menu" CustomToggle="true">
            <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Home())" IconColor="Color.Accent">Home</FluentNavLink>
            <FluentNavLink Href="products" Icon="@(new Icons.Regular.Size20.NumberSymbolSquare())" IconColor="Color.Accent">Products</FluentNavLink>
             @* ##MenuItem## *@
        </FluentNavMenu>
    </nav>
</div>
{{/if}}

{{#if (eq UIFramework "MudBlazor")}}
<div class="nav-menu">
    <MudNavMenu>
        <MudNavLink Href="" Match="NavLinkMatch.All" Icon="Icons.Material.Filled.Home">
            Home
        </MudNavLink>
        <MudNavLink Href="products" Icon="Icons.Material.Filled.Inventory">
            Products
        </MudNavLink>

        @* ##MenuItem## *@

        <MudDivider Class="my-2" />

        <AuthorizeView>
            <Authorized>
                <MudNavLink Href="Account/Manage" Icon="Icons.Material.Filled.Person">
                    @context.User.Identity?.Name
                </MudNavLink>
                <MudButton Variant="Variant.Text"
                         StartIcon="Icons.Material.Filled.Logout"
                         OnClick="@(() => LogoutForm.Submit())"
                         Style="width: 100%; justify-content: flex-start;">
                    Logout
                </MudButton>
                <form @ref="LogoutForm" action="Account/Logout" method="post" style="display: none;">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                </form>
            </Authorized>
            <NotAuthorized>
               @* <MudNavLink Href="Account/Register" Icon="Icons.Material.Filled.PersonAdd">
                    Register
                </MudNavLink>
                <MudNavLink Href="Account/Login" Icon="Icons.Material.Filled.Login">
                    Login
                </MudNavLink>*@
            </NotAuthorized>
        </AuthorizeView>
    </MudNavMenu>
</div>
{{/if}}

{{#if (eq UIFramework "Radzen")}}
<div class="nav-menu">
    <RadzenPanelMenu>
        <RadzenPanelMenuItem Text="Home" Path="" Icon="home" />
        <RadzenPanelMenuItem Text="Products" Path="products" Icon="inventory" />

        @* ##MenuItem## *@

        <AuthorizeView>
            <Authorized>
                <RadzenPanelMenuItem Text="@context.User.Identity?.Name" Path="Account/Manage" Icon="person" />
                <RadzenPanelMenuItem Text="Logout" Icon="logout">
                    <form @ref="LogoutForm" action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Logout" ButtonStyle="ButtonStyle.Light" />
                    </form>
                </RadzenPanelMenuItem>
            </Authorized>
            <NotAuthorized>
                <RadzenPanelMenuItem Text="Register" Path="Account/Register" Icon="person_add" />
                <RadzenPanelMenuItem Text="Login" Path="Account/Login" Icon="login" />
            </NotAuthorized>
        </AuthorizeView>
    </RadzenPanelMenu>
</div>
{{/if}}

@code {
    private string? currentUrl;
    private ElementReference LogoutForm;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
